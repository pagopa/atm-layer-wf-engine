# Default values for atm-layer-wf-engine.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

general:
  log_level: INFO
  replicaCount: 1
  nameOverride: ""
  fullnameOverride: ""

# Set deployment initContainers for any pre-startup proposes.
initContainers: []

# Deployment annotations
annotations: {}

# Custom labels to add to all deployed objects
commonLabels: {}
# Example
#  my-custom-label: my-value

image:
  repository: 00000000000.dkr.ecr.eu-south-1.amazonaws.com/xxxxxxx
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: latest
  # pullSecrets: []
  # command: ['./camunda.sh']
  # args: ['--production','--webapps','--rest','--swaggerui']

# Extra environment variables to customize the deployment.
# For more details: https://github.com/camunda/docker-atm-layer-wf-engine
extraEnvs: []
# Example:
# - name: DB_VALIDATE_ON_BORROW
#   value: false

# Extra containers to have sidecars
extraContainers: []

# By default H2 database is used, which is handy for demos and tests,
# however, H2 is not supported in a clustered scenario.
# So for real-world workloads, an external database like PostgreSQL should be used.
database:
  driver: org.postgresql.Driver
  url: jdbc:postgresql://pagopa-dev-atm-layer-rds.cluster-cyezwzpjc2tj.eu-south-1.rds.amazonaws.com:5431
  db_name: pagopadb
  db_type: postgres
  db_schema_update_config: true
  schema: atm_layer_engine
  credentialsSecretEnabled: true
  credentialsSecretName: pagopa-dev-atm-layer-wf-engine-database
  credentialsSecretKeys:
    username: DB_USERNAME
    password: DB_PASSWORD

springProfilesActive: dev

webuser:
  credentialsSecretEnabled: true
  credentialsSecretName: pagopa-dev-atm-layer-wf-engine-camunda
  credentialsSecretKeys:
    username: WEB_USER
    password: WEB_PASSWORD

tracingEndpoint: http://jaeger-collector.default.svc.cluster.local:4317

configmap:
  enabled: true

service:
  enabled: true
  annotations: {}
  port: 8080
  portName: http
  protocol: TCP
  type: ClusterIP

metrics:
  enabled: false
  service:
    enabled: true
    port: 9404
    portName: metrics
    protocol: TCP
    type: ClusterIP
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/path: "/"
      prometheus.io/port: "9404"

deployment:
  annotation:
    reloader.stakater.com/auto: "true"
    secret.reloader.stakater.com/reload: pagopa-dev-atm-layer-wf-engine-database, pagopa-dev-atm-layer-wf-engine-camunda

secretProviderClass:
  enabled: true
  name: atm-layer-wf-engine-secrets
  env: dev

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::00000000000:role/pagopa-dev-atm-layer-xxxxxx-serviceaccount-role
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# The StartupProbe works with Kubernetes >= 1.6
startupProbe:
  enabled: false
  config:
    httpGet:
      path: /camunda/
      port: http
    initialDelaySeconds: 120
    periodSeconds: 60

readinessProbe:
  enabled: true
  config:
    httpGet:
      path: /camunda/
      port: http
    initialDelaySeconds: 120
    periodSeconds: 60

# An arbitrary use of livenessProbe could make a lot of service interruption, use it wisely.
livenessProbe:
  enabled: false
  config:
    httpGet:
      path: /camunda/
      port: http
    initialDelaySeconds: 120
    periodSeconds: 60

ingress:
  apiVersion: "networking.k8s.io/v1"
  enabled: true
  annotations: 
    kubernetes.io/ingress.class: "alb"
    alb.ingress.kubernetes.io/scheme: "internet-facing"
    alb.ingress.kubernetes.io/group.name: "alb-controller-external"
    alb.ingress.kubernetes.io/load-balancer-name: "pagopa-dev-atm-layer-alb-ext"
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
    alb.ingress.kubernetes.io/target-type: 'ip'
  hosts:
    - paths:
        - /
  tls: []
  #  - secretName: atm-layer-wf-engine-tls
  #    hosts:
  #      - atm-layer-wf-engine.local

# Recreate the pods on any install, no matter if anything has changed.
# Which is useful to recreate the pod if the image tag has not changed.
recreatePods: false

podAnnotations: {}

podSecurityContext:
  fsGroup: 1000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

resources:
  # If you do want to specify resources, uncomment the following lines,
  # adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 1500m
  #   memory: 2500Mi
  # requests:
  #   # cpu: 1000m
  #   memory: 2000Mi

extraVolumeMounts:
  []
  # - name: dummy-volume
  #   mountPath: /dummy/volume

extraVolumes:
  []
  # - name: dummy-volume
  #   hostPath:
  #     path: /tmp/dummy-volume

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 1
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80
  memoryLimits: 2500Mi
  memoryRequests: 2000Mi
  cpuLimits: 1500m
  cpuRequest: 1000m

nodeSelector: {}

tolerations: []

affinity: {}

tests:
  annotations: {}

configMap:
  camunda.bpm:
    admin-user:
      id: ${CAMUNDA_ENGINE_ADMIN_USER}
      password: ${CAMUNDA_ENGINE_ADMIN_PASSWORD}

    database:
      schema-update: ${CAMUNDA_ENGINE_DB_SCHEMA_UPDATE_CONFIG}
      type: ${CAMUNDA_ENGINE_DB_TYPE}
      schema-name: ${CAMUNDA_ENGINE_DB_SCHEMA:camunda}
      table-prefix: ${CAMUNDA_ENGINE_DB_SCHEMA:camunda}.

    webapp:
      csrf:
        enable-same-site-cookie: true
        same-site-cookie-option: STRICT
      header-security:
        hsts-disabled: false
    authorization.enabled: true

    generic-properties.properties:
      deserialization-type-validation-enabled: true
      deserialization-allowed-packages:
      deserialization-allowed-classes:
      enable-password-policy: true

    run:
      auth.enabled: true
      example: false

  server:

  logging:
    level.root: ${CAMUNDA_ENGINE_LOG_LEVEL_ROOT:INFO}

  spring.datasource:
    url: ${CAMUNDA_ENGINE_DB_BASE_URL}/${CAMUNDA_ENGINE_DB_NAME}?currentSchema=${CAMUNDA_ENGINE_DB_SCHEMA:camunda}
    driver-class-name: ${CAMUNDA_ENGINE_DB_DRIVER}
    username: ${CAMUNDA_ENGINE_DB_USERNAME}
    password: ${CAMUNDA_ENGINE_DB_PASSWORD}

  spring.web.resources:
    static-locations: NULL
