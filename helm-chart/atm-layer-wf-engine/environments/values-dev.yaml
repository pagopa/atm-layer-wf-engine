# Default values for atm-layer-wf-engine.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

general:
  log_level: false
  replicaCount: 1
  nameOverride: ""
  fullnameOverride: ""

# Set deployment initContainers for any pre-startup proposes.
initContainers: []

# Deployment annotations
annotations: {}

# Custom labels to add to all deployed objects
commonLabels: {}
# Example
#  my-custom-label: my-value

image:
  repository: 00000000000.dkr.ecr.eu-south-1.amazonaws.com/xxxxxxx
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: latest
  pullSecrets: []
  command: [./camunda.sh --production --rest --swaggerui --webapps]
  args: []

# Extra environment variables to customize the deployment.
# For more details: https://github.com/camunda/docker-atm-layer-wf-engine
extraEnvs: []
# Example:
# - name: DB_VALIDATE_ON_BORROW
#   value: false

# Extra containers to have sidecars
extraContainers: []

# By default H2 database is used, which is handy for demos and tests,
# however, H2 is not supported in a clustered scenario.
# So for real-world workloads, an external database like PostgreSQL should be used.
database:
  driver: org.postgresql.Driver
  url: jdbc:postgresql://pagopa-dev-atm-layer-rds.cluster-cyezwzpjc2tj.eu-south-1.rds.amazonaws.com:5431
  db_name: pagopadb
  schema: atm_layer_engine
  credentialsSecretEnabled: true
  credentialsSecretName: "atm-layer-wf-engine-database"
  credentialsSecretKeys:
    username: DB_USERNAME
    password: DB_PASSWORD

webuser:
  credentialsSecretEnabled: true
  credentialsSecretName: "atm-layer-wf-engine-webuser"
  credentialsSecretKeys:
    username: WEB_USER
    password: WEB_PASSWORD

service:
  enabled: true
  annotations: {}
  port: 8080
  portName: http
  protocol: TCP
  type: ClusterIP

metrics:
  enabled: false
  service:
    enabled: true
    port: 9404
    portName: metrics
    protocol: TCP
    type: ClusterIP
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/path: "/"
      prometheus.io/port: "9404"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# The StartupProbe works with Kubernetes >= 1.6
startupProbe:
  enabled: false
  config:
    httpGet:
      path: /camunda/
      port: http
    initialDelaySeconds: 120
    periodSeconds: 60

readinessProbe:
  enabled: true
  config:
    httpGet:
      path: /camunda/
      port: http
    initialDelaySeconds: 120
    periodSeconds: 60

# An arbitrary use of livenessProbe could make a lot of service interruption, use it wisely.
livenessProbe:
  enabled: false
  config:
    httpGet:
      path: /camunda/
      port: http
    initialDelaySeconds: 120
    periodSeconds: 60

ingress:
  enabled: true
  annotations: 
    kubernetes.io/ingress.class: "alb"
    alb.ingress.kubernetes.io/scheme: "internal"
    alb.ingress.kubernetes.io/group.name: "alb-controller"
    alb.ingress.kubernetes.io/load-balancer-name: "pagopa-dev-atm-layer-alb-int"
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTP": 8080}]'
  hosts:
    - host: atm-layer-wf-engine.local
      paths:
        - /
  tls: []
  #  - secretName: atm-layer-wf-engine-tls
  #    hosts:
  #      - atm-layer-wf-engine.local

# Recreate the pods on any install, no matter if anything has changed.
# Which is useful to recreate the pod if the image tag has not changed.
recreatePods: false

podAnnotations: {}

podSecurityContext:
  fsGroup: 1000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

resources:
  {}
  # If you do want to specify resources, uncomment the following lines,
  # adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

extraVolumeMounts:
  []
  # - name: dummy-volume
  #   mountPath: /dummy/volume

extraVolumes:
  []
  # - name: dummy-volume
  #   hostPath:
  #     path: /tmp/dummy-volume

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 1
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

tests:
  annotations: {}
